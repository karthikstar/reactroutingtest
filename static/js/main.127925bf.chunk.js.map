{"version":3,"sources":["Nav.js","About.js","Shop.js","ItemDetail.js","App.js","serviceWorker.js","index.js"],"names":["Nav","navStyle","color","className","style","to","About","Shop","useEffect","fetchItems","useState","items","setItems","a","fetch","method","headers","data","json","map","item","key","id","name","Item","match","fetchItem","console","log","images","setItem","url","params","src","icon","alt","Home","App","path","exact","component","ItemDetail","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4NA0BeA,MApBf,WACI,IAAMC,EAAW,CACbC,MAAM,SAEV,OAEA,6BACI,yCACA,wBAAIC,UAAY,aACZ,kBAAC,IAAD,CAAMC,MAAOH,EAAUI,GAAK,UACxB,sCAEJ,kBAAC,IAAD,CAAMD,MAAOH,EAAUI,GAAK,SACxB,wCCPDC,MATf,WACE,OACE,6BACI,0CACA,oI,gCC8BOC,MAjCf,WACIC,qBAAU,WACNC,MACD,IAHS,MAKeC,mBAAS,IALxB,mBAKLC,EALK,KAKGC,EALH,KAONH,EAAU,uCAAG,8BAAAI,EAAA,sEACIC,MAFX,oFAEuB,CAC3BC,OAAO,MACPC,QAAQ,CACJ,cAAgB,yCAJT,cACTC,EADS,gBAOKA,EAAKC,OAPV,OAOTP,EAPS,OAUfC,EAASD,EAAMA,OAVA,2CAAH,qDAahB,OACA,6BAEIA,EAAMQ,KAAI,SAAAC,GAAI,OACV,wBAAIC,IAAOD,EAAKE,IACZ,kBAAC,IAAD,CAAMjB,GAAE,gBAAae,EAAKE,KAAOF,EAAKG,YCOvCC,MAhCf,YAAwB,IAATC,EAAQ,EAARA,MACXjB,qBAAU,WACNkB,IACAC,QAAQC,IAAIH,KACb,IAJgB,MAMMf,mBAAS,CAC9BmB,OAAQ,KAPO,mBAMZT,EANY,KAMLU,EANK,KASbC,EAAG,kFAA8EN,EAAMO,OAAOV,IAC9FI,EAAS,uCAAG,8BAAAb,EAAA,sEACUC,MAAOiB,EAAK,CAChChB,OAAO,MACPC,QAAQ,CACJ,cAAgB,yCAJV,cACRU,EADQ,gBASMA,EAAUR,OAThB,OASRE,EATQ,OAUdO,QAAQC,IAAIR,EAAKA,MACjBU,EAAQV,EAAKA,MAXC,2CAAH,qDAcf,OACC,6BACG,4BAAKA,EAAKG,MACV,yBAAKU,IAAOb,EAAKS,OAAOK,KAAMC,IAAM,O,OCL5C,IAAMC,EAAO,WACX,OACE,6BACE,2CACA,mGAKSC,EAzBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKlC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmC,KAAO,IAAIC,OAAK,EAACC,UAAaJ,IACrC,kBAAC,IAAD,CAAOE,KAAO,SAASE,UAAalC,IACpC,kBAAC,IAAD,CAAOgC,KAAO,QAAQC,OAAK,EAACC,UAAajC,IACzC,kBAAC,IAAD,CAAO+B,KAAO,YAAYE,UAAYC,QCP5BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpB,MACvB,2DCZNqB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,a","file":"static/js/main.127925bf.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\n// to navigate to diff paths using the navbar, rather than using anchor tag that we normally do, \r\nimport {Link} from 'react-router-dom'\r\n\r\nfunction Nav() {\r\n    const navStyle = {\r\n        color:'white'\r\n    }\r\n    return (\r\n    \r\n    <nav>\r\n        <h3>fortnite?</h3>\r\n        <ul className = \"nav-links\">\r\n            <Link style={navStyle} to = '/about'>\r\n                <li>About</li>\r\n            </Link>\r\n            <Link style={navStyle} to = '/shop'>\r\n                <li>Shop</li>\r\n            </Link>\r\n        </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nfunction About() {\r\n  return (\r\n    <div>\r\n        <h1>About Page</h1>\r\n        <h3>This site displays the upcoming shop items available on Fortnite. Click the Shop for more details!</h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React,{useState,useEffect} from 'react';\r\nimport './App.css';\r\nimport {Link} from 'react-router-dom'\r\n\r\nfunction Shop() {\r\n    useEffect(() => {\r\n        fetchItems()\r\n    }, [])\r\n\r\n    const [items , setItems] = useState([])\r\n    const url = \"https://cors-anywhere.herokuapp.com/https://fortniteapi.io/items/upcoming?lang=en\"\r\n    const fetchItems = async () => {\r\n        const data = await fetch (url, {\r\n            method:\"GET\",\r\n            headers:{\r\n                'Authorization':\"f9f813af-dee4363c-57634ca1-18e927c2\"     \r\n            }\r\n        })\r\n        const items = await data.json()\r\n\r\n        // console.log(items.items)\r\n        setItems(items.items)\r\n\r\n    }\r\n    return (\r\n    <div >\r\n      {\r\n        items.map(item =>(\r\n            <h1 key = {item.id}>\r\n                <Link to = {`/shop/${item.id}`}>{item.name}</Link>\r\n            </h1>\r\n        )) \r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Shop;\r\n\r\n// this iis an example of dynamic routing . \r\n// to create dynamic routing, use Link from react-router, and wrap each item.name around a Link so that when we click the h1 tag of the item name, it will take us to the path.\r\n// add a to prop to the Link element , and pass a path using back ticks which incorporates the item id. ","import React,{useState,useEffect} from 'react';\r\nimport './App.css';\r\n// import {Link} from 'react-router-dom'\r\n\r\nfunction Item({match}) {\r\n    useEffect(() => {\r\n        fetchItem()\r\n        console.log(match)\r\n    }, [])\r\n\r\n    const [item , setItem] = useState({\r\n        images: {}\r\n    })\r\n    const url = `https://cors-anywhere.herokuapp.com/https://fortniteapi.io/items/get?id=${match.params.id}`\r\n    const fetchItem = async () => {\r\n        const fetchItem = await fetch (url, {\r\n            method:\"GET\",\r\n            headers:{\r\n                'Authorization':\"f9f813af-dee4363c-57634ca1-18e927c2\"     \r\n            }\r\n        })\r\n\r\n\r\n        const item  = await fetchItem.json()\r\n        console.log(item.item)\r\n        setItem(item.item)\r\n\r\n    }\r\n    return (\r\n     <div >\r\n        <h1>{item.name}</h1>\r\n        <img src = {item.images.icon} alt = \"\" />\r\n     </div>\r\n  );\r\n}\r\n\r\nexport default Item;\r\n\r\n// this iis an example of dynamic routing . \r\n// to create dynamic routing, use Link from react-router, and wrap each item.name around a Link so that when we click the h1 tag of the item name, it will take us to the path.\r\n// add a to prop to the Link element , and pass a path using back ticks which incorporates the item id. ","import React from 'react';\nimport './App.css';\nimport Nav from './Nav';\nimport About from './About';\nimport Shop from './Shop';\nimport ItemDetail from './ItemDetail'\n\n// we want to import specific things from react router dom\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Nav/>\n        <Switch>\n          <Route path = \"/\" exact component = {Home} />\n          <Route path = \"/about\" component = {About} />\n          <Route path = \"/shop\" exact component = {Shop} />\n          <Route path = \"/shop/:id\" component= {ItemDetail}/>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nconst Home = () => {\n  return(\n    <div>\n      <h1> Home Page </h1>\n      <h3>Hi there,this is a test project to learn more about React Routing</h3>\n    </div>    \n  )\n}\n\nexport default App;\n\n// i want nav to be rendered all the time \n// but when i go to about page, then only i want to render About component\n// and when i go to shop page the i want to render the shop page.\n\n// in the route element we pass in a path prop, and a comp prop to indicate which prop to render when we go to that specified path\n\n// !!! line 16 - SPECIFYING THAT only if we go to /, then the home component is renderd, anythn that comes after , its not gonna work anymore.\n\n// we need to specify exact component for the home component,to tell react only to render it when the EXACT PATH is '/\"\n// this is because usually react router renders the component upon first match with the path\n// eg if we go to \"localhost:3000/about\" since / first matches with route path for home, it renders home component instead of the about component\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}